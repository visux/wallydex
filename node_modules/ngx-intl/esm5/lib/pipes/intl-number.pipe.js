/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Pipe } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil, skip } from 'rxjs/operators';
import { IntlService } from '../intl.service';
/**
 * @author Abdel El-medny
 *
 * Shows numbers based on the Intl API
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat
 */
var IntlNumberPipe = /** @class */ (function () {
    function IntlNumberPipe(changeDetectorRef, $intl) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.$intl = $intl;
        this.lastOutput = null;
        this.lastInput = [null, null];
        this.stop$ = new Subject();
        // If the locale changes, we will take the last inputs we were given, will re-calc the output and trigger CD
        //
        this.$intl.getLocale$().pipe(takeUntil(this.stop$), skip(1))
            .subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            var _a = tslib_1.__read(_this.lastInput, 2), lastDate = _a[0], lastOpts = _a[1];
            _this.lastOutput = new Intl.NumberFormat(locale, lastOpts).format(lastDate);
            _this.changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    IntlNumberPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        // If the input hasn't changed, we will send back the last calculated value
        //
        if (this.lastInput.toString() === value.toString()) {
            return this.lastOutput;
        }
        // Storing this for later usage incase locale changes
        //
        this.lastInput = [(/** @type {?} */ (arguments[0])), (/** @type {?} */ (arguments[1]))];
        /** @type {?} */
        var currentLocale = this.$intl.getLocale$().value;
        this.lastOutput = new Intl.NumberFormat(currentLocale, opts).format(value);
        return this.lastOutput;
    };
    /**
     * @return {?}
     */
    IntlNumberPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stop$.next();
    };
    IntlNumberPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'intlNumber',
                    pure: false,
                },] }
    ];
    /** @nocollapse */
    IntlNumberPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: IntlService }
    ]; };
    return IntlNumberPipe;
}());
export { IntlNumberPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IntlNumberPipe.prototype.lastOutput;
    /**
     * @type {?}
     * @private
     */
    IntlNumberPipe.prototype.lastInput;
    /**
     * @type {?}
     * @private
     */
    IntlNumberPipe.prototype.stop$;
    /**
     * @type {?}
     * @private
     */
    IntlNumberPipe.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    IntlNumberPipe.prototype.$intl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50bC1udW1iZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbnRsLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL2ludGwtbnVtYmVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQWEsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVsRixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7OztBQVM5QztJQVlFLHdCQUNVLGlCQUFvQyxFQUNwQyxLQUFrQjtRQUY1QixpQkFpQkM7UUFoQlMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxVQUFLLEdBQUwsS0FBSyxDQUFhO1FBUnBCLGVBQVUsR0FBVyxJQUFJLENBQUM7UUFFMUIsY0FBUyxHQUF1QyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU3RCxVQUFLLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQU01Qiw0R0FBNEc7UUFDNUcsRUFBRTtRQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUMxQixTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUNyQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1I7YUFDQSxTQUFTOzs7O1FBQUMsVUFBQyxNQUFNO1lBQ1YsSUFBQSx1Q0FBcUMsRUFBcEMsZ0JBQVEsRUFBRSxnQkFBMEI7WUFFM0MsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUUzRSxLQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEMsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7SUFFRCxrQ0FBUzs7Ozs7SUFBVCxVQUFVLEtBQWEsRUFBRSxJQUErQjtRQUN0RCwyRUFBMkU7UUFDM0UsRUFBRTtRQUNGLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDbEQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQ3hCO1FBRUQscURBQXFEO1FBQ3JELEVBQUU7UUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsbUJBQUEsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFVLEVBQUUsbUJBQUEsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUE0QixDQUFDLENBQUM7O1lBRTlFLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUs7UUFFbkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELG9DQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQzs7Z0JBbkRGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsWUFBWTtvQkFDbEIsSUFBSSxFQUFFLEtBQUs7aUJBQ1o7Ozs7Z0JBaEJRLGlCQUFpQjtnQkFJakIsV0FBVzs7SUE2RHBCLHFCQUFDO0NBQUEsQUFwREQsSUFvREM7U0FoRFksY0FBYzs7Ozs7O0lBRXpCLG9DQUFrQzs7Ozs7SUFFbEMsbUNBQXFFOzs7OztJQUVyRSwrQkFBOEI7Ozs7O0lBRzVCLDJDQUE0Qzs7Ozs7SUFDNUMsK0JBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNFcXVhbCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwsIHNraXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJbnRsU2VydmljZSB9IGZyb20gJy4uL2ludGwuc2VydmljZSc7XG5cbi8qKlxuICogQGF1dGhvciBBYmRlbCBFbC1tZWRueVxuICpcbiAqIFNob3dzIG51bWJlcnMgYmFzZWQgb24gdGhlIEludGwgQVBJXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXJGb3JtYXRcbiAqL1xuQFBpcGUoe1xuICBuYW1lOiAnaW50bE51bWJlcicsXG4gIHB1cmU6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBJbnRsTnVtYmVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBsYXN0T3V0cHV0OiBzdHJpbmcgPSBudWxsO1xuXG4gIHByaXZhdGUgbGFzdElucHV0OiBbbnVtYmVyLCBJbnRsLk51bWJlckZvcm1hdE9wdGlvbnNdID0gW251bGwsIG51bGxdO1xuXG4gIHByaXZhdGUgc3RvcCQgPSBuZXcgU3ViamVjdCgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgJGludGw6IEludGxTZXJ2aWNlLFxuICApIHtcbiAgICAvLyBJZiB0aGUgbG9jYWxlIGNoYW5nZXMsIHdlIHdpbGwgdGFrZSB0aGUgbGFzdCBpbnB1dHMgd2Ugd2VyZSBnaXZlbiwgd2lsbCByZS1jYWxjIHRoZSBvdXRwdXQgYW5kIHRyaWdnZXIgQ0RcbiAgICAvL1xuICAgIHRoaXMuJGludGwuZ2V0TG9jYWxlJCgpLnBpcGUoXG4gICAgICB0YWtlVW50aWwodGhpcy5zdG9wJCksXG4gICAgICBza2lwKDEpLFxuICAgIClcbiAgICAuc3Vic2NyaWJlKChsb2NhbGUpID0+IHtcbiAgICAgIGNvbnN0IFtsYXN0RGF0ZSwgbGFzdE9wdHNdID0gdGhpcy5sYXN0SW5wdXQ7XG5cbiAgICAgIHRoaXMubGFzdE91dHB1dCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIGxhc3RPcHRzKS5mb3JtYXQobGFzdERhdGUpO1xuXG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgdHJhbnNmb3JtKHZhbHVlOiBudW1iZXIsIG9wdHM/OiBJbnRsLk51bWJlckZvcm1hdE9wdGlvbnMpOiBzdHJpbmcge1xuICAgIC8vIElmIHRoZSBpbnB1dCBoYXNuJ3QgY2hhbmdlZCwgd2Ugd2lsbCBzZW5kIGJhY2sgdGhlIGxhc3QgY2FsY3VsYXRlZCB2YWx1ZVxuICAgIC8vXG4gICAgaWYgKHRoaXMubGFzdElucHV0LnRvU3RyaW5nKCkgPT09IHZhbHVlLnRvU3RyaW5nKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhc3RPdXRwdXQ7XG4gICAgfVxuXG4gICAgLy8gU3RvcmluZyB0aGlzIGZvciBsYXRlciB1c2FnZSBpbmNhc2UgbG9jYWxlIGNoYW5nZXNcbiAgICAvL1xuICAgIHRoaXMubGFzdElucHV0ID0gW2FyZ3VtZW50c1swXSBhcyBudW1iZXIsIGFyZ3VtZW50c1sxXSBhcyBJbnRsLk51bWJlckZvcm1hdE9wdGlvbnNdO1xuXG4gICAgY29uc3QgY3VycmVudExvY2FsZSA9IHRoaXMuJGludGwuZ2V0TG9jYWxlJCgpLnZhbHVlO1xuXG4gICAgdGhpcy5sYXN0T3V0cHV0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGN1cnJlbnRMb2NhbGUsIG9wdHMpLmZvcm1hdCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gdGhpcy5sYXN0T3V0cHV0O1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdG9wJC5uZXh0KCk7XG4gIH1cbn1cbiJdfQ==
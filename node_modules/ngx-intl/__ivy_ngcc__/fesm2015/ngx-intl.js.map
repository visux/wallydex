{"version":3,"file":"ngx-intl.js","sources":["ngx-intl/lib/default-locale.token.ts","ngx-intl/lib/intl.service.ts","ngx-intl/lib/pipes/intl-date.pipe.ts","ngx-intl/lib/pipes/intl-number.pipe.ts","ngx-intl/lib/ngx-intl.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const NGX_INTL_DEFAULT_LOCALE = new InjectionToken<string>('ngx.intl.default.locale');\n","import { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { NGX_INTL_DEFAULT_LOCALE } from './default-locale.token';\n\n/**\n * @author Abdel El-medny\n *\n * This service will be the backbone of the intl number and date pipe\n */\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IntlService {\n\n  private locale$: BehaviorSubject<string>;\n\n  constructor(@Inject(NGX_INTL_DEFAULT_LOCALE) private defaultLocale: string) {\n    this.locale$ = new BehaviorSubject<string>(this.defaultLocale);\n  }\n\n  public updateLocale(locale: string) {\n    this.locale$.next(locale);\n  }\n\n  public getLocale$(): BehaviorSubject<string> {\n    return this.locale$;\n  }\n}\n","import { ChangeDetectorRef, Pipe, PipeTransform, OnDestroy } from '@angular/core';\nimport { isEqual } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { takeUntil, skip } from 'rxjs/operators';\nimport { IntlService } from '../intl.service';\n\n/**\n * @author Abdel El-medny\n *\n * Shows dates based on the Intl API\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n */\n@Pipe({\n  name: 'intlDate',\n  pure: false,\n})\nexport class IntlDatePipe implements PipeTransform, OnDestroy {\n\n  private lastOutput: string = null;\n\n  private lastInput: [Date|string, Intl.DateTimeFormatOptions] = [null, null];\n\n  private stop$ = new Subject();\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private $internationalisation: IntlService,\n  ) {\n    // If the locale changes, we will take the last inputs we were given, will re-calc the output and trigger CD\n    //\n    this.$internationalisation.getLocale$().pipe(\n      takeUntil(this.stop$),\n      skip(1),\n    )\n    .subscribe((locale) => {\n      const [lastValue, lastOpts] = this.lastInput;\n\n      const dateObject = (lastValue && typeof lastValue === 'string') ? new Date(lastValue as string) : lastValue as Date;\n\n      this.lastOutput = new Intl.DateTimeFormat(locale, lastOpts).format(dateObject);\n\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  transform(value: Date|string, opts?: Intl.DateTimeFormatOptions): string {\n    // If the input hasn't changed, we will send back the last calculated value\n    //\n    if (this.lastInput.toString() === value.toString()) {\n      return this.lastOutput;\n    }\n\n    // Storing this for later usage incase locale changes\n    //\n    this.lastInput = [arguments[0] as Date|string, arguments[1] as Intl.DateTimeFormatOptions];\n\n    const currentLocale = this.$internationalisation.getLocale$().value;\n\n    const dateObject = typeof value === 'string' ? new Date(value as string) : value as Date;\n\n    this.lastOutput = new Intl.DateTimeFormat(currentLocale, opts).format(dateObject);\n\n    return this.lastOutput;\n  }\n\n  ngOnDestroy() {\n    this.stop$.next();\n  }\n}\n","import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';\nimport { isEqual } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { takeUntil, skip } from 'rxjs/operators';\nimport { IntlService } from '../intl.service';\n\n/**\n * @author Abdel El-medny\n *\n * Shows numbers based on the Intl API\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n */\n@Pipe({\n  name: 'intlNumber',\n  pure: false,\n})\nexport class IntlNumberPipe implements PipeTransform, OnDestroy {\n\n  private lastOutput: string = null;\n\n  private lastInput: [number, Intl.NumberFormatOptions] = [null, null];\n\n  private stop$ = new Subject();\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private $intl: IntlService,\n  ) {\n    // If the locale changes, we will take the last inputs we were given, will re-calc the output and trigger CD\n    //\n    this.$intl.getLocale$().pipe(\n      takeUntil(this.stop$),\n      skip(1),\n    )\n    .subscribe((locale) => {\n      const [lastDate, lastOpts] = this.lastInput;\n\n      this.lastOutput = new Intl.NumberFormat(locale, lastOpts).format(lastDate);\n\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  transform(value: number, opts?: Intl.NumberFormatOptions): string {\n    // If the input hasn't changed, we will send back the last calculated value\n    //\n    if (this.lastInput.toString() === value.toString()) {\n      return this.lastOutput;\n    }\n\n    // Storing this for later usage incase locale changes\n    //\n    this.lastInput = [arguments[0] as number, arguments[1] as Intl.NumberFormatOptions];\n\n    const currentLocale = this.$intl.getLocale$().value;\n\n    this.lastOutput = new Intl.NumberFormat(currentLocale, opts).format(value);\n\n    return this.lastOutput;\n  }\n\n  ngOnDestroy() {\n    this.stop$.next();\n  }\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { NGX_INTL_DEFAULT_LOCALE } from './default-locale.token';\nimport { NgxIntlModuleOpts } from './interfaces';\nimport { IntlDatePipe } from './pipes/intl-date.pipe';\nimport { IntlNumberPipe } from './pipes/intl-number.pipe';\n\n@NgModule({\n  declarations: [IntlDatePipe, IntlNumberPipe],\n  imports: [\n  ],\n  exports: [IntlDatePipe, IntlNumberPipe]\n})\nexport class NgxIntlModule {\n  static forRoot(options: NgxIntlModuleOpts) {\n    return {\n      ngModule: NgxIntlModule,\n      providers: [\n        { provide: NGX_INTL_DEFAULT_LOCALE, useValue: options.defaultLocale } as ValueProvider,\n      ]\n    };\n  }\n }\n"]}
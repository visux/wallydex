/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NGX_INTL_DEFAULT_LOCALE } from './default-locale.token';
import * as i0 from "@angular/core";
import * as i1 from "./default-locale.token";
/**
 * @author Abdel El-medny
 *
 * This service will be the backbone of the intl number and date pipe
 */
export class IntlService {
    /**
     * @param {?} defaultLocale
     */
    constructor(defaultLocale) {
        this.defaultLocale = defaultLocale;
        this.locale$ = new BehaviorSubject(this.defaultLocale);
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    updateLocale(locale) {
        this.locale$.next(locale);
    }
    /**
     * @return {?}
     */
    getLocale$() {
        return this.locale$;
    }
}
IntlService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IntlService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [NGX_INTL_DEFAULT_LOCALE,] }] }
];
/** @nocollapse */ IntlService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IntlService_Factory() { return new IntlService(i0.ɵɵinject(i1.NGX_INTL_DEFAULT_LOCALE)); }, token: IntlService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    IntlService.prototype.locale$;
    /**
     * @type {?}
     * @private
     */
    IntlService.prototype.defaultLocale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50bC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWludGwvIiwic291cmNlcyI6WyJsaWIvaW50bC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7Ozs7OztBQVdqRSxNQUFNLE9BQU8sV0FBVzs7OztJQUl0QixZQUFxRCxhQUFxQjtRQUFyQixrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUN4RSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7OztJQUVNLFlBQVksQ0FBQyxNQUFjO1FBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFTSxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7OztZQWpCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7eUNBS2MsTUFBTSxTQUFDLHVCQUF1Qjs7Ozs7Ozs7SUFGM0MsOEJBQXlDOzs7OztJQUU3QixvQ0FBOEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTkdYX0lOVExfREVGQVVMVF9MT0NBTEUgfSBmcm9tICcuL2RlZmF1bHQtbG9jYWxlLnRva2VuJztcblxuLyoqXG4gKiBAYXV0aG9yIEFiZGVsIEVsLW1lZG55XG4gKlxuICogVGhpcyBzZXJ2aWNlIHdpbGwgYmUgdGhlIGJhY2tib25lIG9mIHRoZSBpbnRsIG51bWJlciBhbmQgZGF0ZSBwaXBlXG4gKi9cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSW50bFNlcnZpY2Uge1xuXG4gIHByaXZhdGUgbG9jYWxlJDogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz47XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChOR1hfSU5UTF9ERUZBVUxUX0xPQ0FMRSkgcHJpdmF0ZSBkZWZhdWx0TG9jYWxlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmxvY2FsZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4odGhpcy5kZWZhdWx0TG9jYWxlKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVMb2NhbGUobG9jYWxlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmxvY2FsZSQubmV4dChsb2NhbGUpO1xuICB9XG5cbiAgcHVibGljIGdldExvY2FsZSQoKTogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZSQ7XG4gIH1cbn1cbiJdfQ==
{"version":3,"file":"ngx-intl.js","sources":["ng://ngx-intl/lib/default-locale.token.ts","ng://ngx-intl/lib/intl.service.ts","ng://ngx-intl/lib/pipes/intl-date.pipe.ts","ng://ngx-intl/lib/pipes/intl-number.pipe.ts","ng://ngx-intl/lib/ngx-intl.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const NGX_INTL_DEFAULT_LOCALE = new InjectionToken<string>('ngx.intl.default.locale');\n","import { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { NGX_INTL_DEFAULT_LOCALE } from './default-locale.token';\n\n/**\n * @author Abdel El-medny\n *\n * This service will be the backbone of the intl number and date pipe\n */\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IntlService {\n\n  private locale$: BehaviorSubject<string>;\n\n  constructor(@Inject(NGX_INTL_DEFAULT_LOCALE) private defaultLocale: string) {\n    this.locale$ = new BehaviorSubject<string>(this.defaultLocale);\n  }\n\n  public updateLocale(locale: string) {\n    this.locale$.next(locale);\n  }\n\n  public getLocale$(): BehaviorSubject<string> {\n    return this.locale$;\n  }\n}\n","import { ChangeDetectorRef, Pipe, PipeTransform, OnDestroy } from '@angular/core';\nimport { isEqual } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { takeUntil, skip } from 'rxjs/operators';\nimport { IntlService } from '../intl.service';\n\n/**\n * @author Abdel El-medny\n *\n * Shows dates based on the Intl API\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n */\n@Pipe({\n  name: 'intlDate',\n  pure: false,\n})\nexport class IntlDatePipe implements PipeTransform, OnDestroy {\n\n  private lastOutput: string = null;\n\n  private lastInput: [Date|string, Intl.DateTimeFormatOptions] = [null, null];\n\n  private stop$ = new Subject();\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private $internationalisation: IntlService,\n  ) {\n    // If the locale changes, we will take the last inputs we were given, will re-calc the output and trigger CD\n    //\n    this.$internationalisation.getLocale$().pipe(\n      takeUntil(this.stop$),\n      skip(1),\n    )\n    .subscribe((locale) => {\n      const [lastValue, lastOpts] = this.lastInput;\n\n      const dateObject = (lastValue && typeof lastValue === 'string') ? new Date(lastValue as string) : lastValue as Date;\n\n      this.lastOutput = new Intl.DateTimeFormat(locale, lastOpts).format(dateObject);\n\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  transform(value: Date|string, opts?: Intl.DateTimeFormatOptions): string {\n    // If the input hasn't changed, we will send back the last calculated value\n    //\n    if (this.lastInput.toString() === value.toString()) {\n      return this.lastOutput;\n    }\n\n    // Storing this for later usage incase locale changes\n    //\n    this.lastInput = [arguments[0] as Date|string, arguments[1] as Intl.DateTimeFormatOptions];\n\n    const currentLocale = this.$internationalisation.getLocale$().value;\n\n    const dateObject = typeof value === 'string' ? new Date(value as string) : value as Date;\n\n    this.lastOutput = new Intl.DateTimeFormat(currentLocale, opts).format(dateObject);\n\n    return this.lastOutput;\n  }\n\n  ngOnDestroy() {\n    this.stop$.next();\n  }\n}\n","import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';\nimport { isEqual } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { takeUntil, skip } from 'rxjs/operators';\nimport { IntlService } from '../intl.service';\n\n/**\n * @author Abdel El-medny\n *\n * Shows numbers based on the Intl API\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n */\n@Pipe({\n  name: 'intlNumber',\n  pure: false,\n})\nexport class IntlNumberPipe implements PipeTransform, OnDestroy {\n\n  private lastOutput: string = null;\n\n  private lastInput: [number, Intl.NumberFormatOptions] = [null, null];\n\n  private stop$ = new Subject();\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private $intl: IntlService,\n  ) {\n    // If the locale changes, we will take the last inputs we were given, will re-calc the output and trigger CD\n    //\n    this.$intl.getLocale$().pipe(\n      takeUntil(this.stop$),\n      skip(1),\n    )\n    .subscribe((locale) => {\n      const [lastDate, lastOpts] = this.lastInput;\n\n      this.lastOutput = new Intl.NumberFormat(locale, lastOpts).format(lastDate);\n\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  transform(value: number, opts?: Intl.NumberFormatOptions): string {\n    // If the input hasn't changed, we will send back the last calculated value\n    //\n    if (this.lastInput.toString() === value.toString()) {\n      return this.lastOutput;\n    }\n\n    // Storing this for later usage incase locale changes\n    //\n    this.lastInput = [arguments[0] as number, arguments[1] as Intl.NumberFormatOptions];\n\n    const currentLocale = this.$intl.getLocale$().value;\n\n    this.lastOutput = new Intl.NumberFormat(currentLocale, opts).format(value);\n\n    return this.lastOutput;\n  }\n\n  ngOnDestroy() {\n    this.stop$.next();\n  }\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { NGX_INTL_DEFAULT_LOCALE } from './default-locale.token';\nimport { NgxIntlModuleOpts } from './interfaces';\nimport { IntlDatePipe } from './pipes/intl-date.pipe';\nimport { IntlNumberPipe } from './pipes/intl-number.pipe';\n\n@NgModule({\n  declarations: [IntlDatePipe, IntlNumberPipe],\n  imports: [\n  ],\n  exports: [IntlDatePipe, IntlNumberPipe]\n})\nexport class NgxIntlModule {\n  static forRoot(options: NgxIntlModuleOpts) {\n    return {\n      ngModule: NgxIntlModule,\n      providers: [\n        { provide: NGX_INTL_DEFAULT_LOCALE, useValue: options.defaultLocale } as ValueProvider,\n      ]\n    };\n  }\n }\n"],"names":[],"mappings":"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"}
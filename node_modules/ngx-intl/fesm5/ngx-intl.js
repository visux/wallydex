import { InjectionToken, Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, Pipe, ChangeDetectorRef, NgModule } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { __read } from 'tslib';
import { takeUntil, skip } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NGX_INTL_DEFAULT_LOCALE = new InjectionToken('ngx.intl.default.locale');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @author Abdel El-medny
 *
 * This service will be the backbone of the intl number and date pipe
 */
var IntlService = /** @class */ (function () {
    function IntlService(defaultLocale) {
        this.defaultLocale = defaultLocale;
        this.locale$ = new BehaviorSubject(this.defaultLocale);
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    IntlService.prototype.updateLocale = /**
     * @param {?} locale
     * @return {?}
     */
    function (locale) {
        this.locale$.next(locale);
    };
    /**
     * @return {?}
     */
    IntlService.prototype.getLocale$ = /**
     * @return {?}
     */
    function () {
        return this.locale$;
    };
    IntlService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IntlService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [NGX_INTL_DEFAULT_LOCALE,] }] }
    ]; };
    /** @nocollapse */ IntlService.ngInjectableDef = ɵɵdefineInjectable({ factory: function IntlService_Factory() { return new IntlService(ɵɵinject(NGX_INTL_DEFAULT_LOCALE)); }, token: IntlService, providedIn: "root" });
    return IntlService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @author Abdel El-medny
 *
 * Shows dates based on the Intl API
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
 */
var IntlDatePipe = /** @class */ (function () {
    function IntlDatePipe(changeDetectorRef, $internationalisation) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.$internationalisation = $internationalisation;
        this.lastOutput = null;
        this.lastInput = [null, null];
        this.stop$ = new Subject();
        // If the locale changes, we will take the last inputs we were given, will re-calc the output and trigger CD
        //
        this.$internationalisation.getLocale$().pipe(takeUntil(this.stop$), skip(1))
            .subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            var _a = __read(_this.lastInput, 2), lastValue = _a[0], lastOpts = _a[1];
            /** @type {?} */
            var dateObject = (lastValue && typeof lastValue === 'string') ? new Date((/** @type {?} */ (lastValue))) : (/** @type {?} */ (lastValue));
            _this.lastOutput = new Intl.DateTimeFormat(locale, lastOpts).format(dateObject);
            _this.changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    IntlDatePipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        // If the input hasn't changed, we will send back the last calculated value
        //
        if (this.lastInput.toString() === value.toString()) {
            return this.lastOutput;
        }
        // Storing this for later usage incase locale changes
        //
        this.lastInput = [(/** @type {?} */ (arguments[0])), (/** @type {?} */ (arguments[1]))];
        /** @type {?} */
        var currentLocale = this.$internationalisation.getLocale$().value;
        /** @type {?} */
        var dateObject = typeof value === 'string' ? new Date((/** @type {?} */ (value))) : (/** @type {?} */ (value));
        this.lastOutput = new Intl.DateTimeFormat(currentLocale, opts).format(dateObject);
        return this.lastOutput;
    };
    /**
     * @return {?}
     */
    IntlDatePipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stop$.next();
    };
    IntlDatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'intlDate',
                    pure: false,
                },] }
    ];
    /** @nocollapse */
    IntlDatePipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: IntlService }
    ]; };
    return IntlDatePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @author Abdel El-medny
 *
 * Shows numbers based on the Intl API
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat
 */
var IntlNumberPipe = /** @class */ (function () {
    function IntlNumberPipe(changeDetectorRef, $intl) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.$intl = $intl;
        this.lastOutput = null;
        this.lastInput = [null, null];
        this.stop$ = new Subject();
        // If the locale changes, we will take the last inputs we were given, will re-calc the output and trigger CD
        //
        this.$intl.getLocale$().pipe(takeUntil(this.stop$), skip(1))
            .subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            var _a = __read(_this.lastInput, 2), lastDate = _a[0], lastOpts = _a[1];
            _this.lastOutput = new Intl.NumberFormat(locale, lastOpts).format(lastDate);
            _this.changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    IntlNumberPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        // If the input hasn't changed, we will send back the last calculated value
        //
        if (this.lastInput.toString() === value.toString()) {
            return this.lastOutput;
        }
        // Storing this for later usage incase locale changes
        //
        this.lastInput = [(/** @type {?} */ (arguments[0])), (/** @type {?} */ (arguments[1]))];
        /** @type {?} */
        var currentLocale = this.$intl.getLocale$().value;
        this.lastOutput = new Intl.NumberFormat(currentLocale, opts).format(value);
        return this.lastOutput;
    };
    /**
     * @return {?}
     */
    IntlNumberPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stop$.next();
    };
    IntlNumberPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'intlNumber',
                    pure: false,
                },] }
    ];
    /** @nocollapse */
    IntlNumberPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: IntlService }
    ]; };
    return IntlNumberPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxIntlModule = /** @class */ (function () {
    function NgxIntlModule() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    NgxIntlModule.forRoot = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: NgxIntlModule,
            providers: [
                (/** @type {?} */ ({ provide: NGX_INTL_DEFAULT_LOCALE, useValue: options.defaultLocale })),
            ]
        };
    };
    NgxIntlModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IntlDatePipe, IntlNumberPipe],
                    imports: [],
                    exports: [IntlDatePipe, IntlNumberPipe]
                },] }
    ];
    return NgxIntlModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { IntlService, NgxIntlModule, NGX_INTL_DEFAULT_LOCALE as ɵa, IntlDatePipe as ɵb, IntlNumberPipe as ɵc };
//# sourceMappingURL=ngx-intl.js.map
